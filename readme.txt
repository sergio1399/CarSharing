Рабочая конфигурация
MySQL 8.0
Spring Boot 2.0.6
Java 8
Для работы приложения необходимо убедиться в корректности прописанного в application.properties пути к установленному серверу БД MySQL. 
По умолчанию прописан localhost. Также необходимо предварительно выполнить скрипт scheme.sql используя средства MySQL, например MySQL Command Line Client 8.0.
Текущая реализация программы считается демонстрационной и может быть доработана в случае необходимости или принятии решения о ее использование в каких бы то ни было целях.
Архитектура системы.
БД. Состоит на данном этапе из трех таблиц - auto(автомобиль), customer(клиент) и auto_customer(джойн таблица взятия клиентом в аренду автомобиля или попросту таблица аренды).
Такая реализация схемы БД за счет связи многие ко многим позволяет сделать хранение данных достаточно гибким для системы практически любой сложности. 
Может использоваться для статистики, учета и оценок разных клиентов. Позволяет сделать систему расширяемой. Во всех таблицах реализованы автоинкрементные суррогатные первичные ключи.
За счет ограничений уникальности также имеются альтернативные ключи - у автомобиля номер VIN, у клиента номер паспорта. Они и используются в текущих запросах как параметры, как вариант
альтернативного решения и для демонстрационных целей. В api приложения на данный момент реализовано два клиентских запроса - открытие аренды авто и закрытие аренды авто.
В таблице Аренда помимо ключевых есть поля - дата и время начала действия аренды и дата и время окончания действия, а также поле статуса аренды и время фактического закрытия. 
При открытии аренды поле статус равно "active", поле фактического закрытия пустое. Нельзя взять в аренду автомобиль уже находящийся в настоящее время в аренде, то есть в БД есть
запись в таблице Аренда в активном статусе с целевым автомобилем. В ответ на запрос аренды такого автомобиля приложение выдаст ошибку. В свою очередь один клиент может брать
неограниченное количество свободных автомобилей в одновременную аренду. В дальнейшем необходимо проанализировать целесообразность введения данного ограничения и его форму.
Если клиент из тела запроса на открытие аренды не найден в БД он добавляется в нее.
Запрос на закрытие аренды реализован GET методом с тремя параметрами. Они не являются обязательными, тем не менее поиск осуществляется либо по ID аренды либо по VIN авто и паспорту
клиента, если отсутствуют все три параметра вернется текст ошибки. Данная реализация является демонстрационной, показывающей разные варианты поиска с использованием 
Spring Data Repository.
Если запись по входным параметрам не найдена в таблице Аренда или статус аренды неактивен, возвращается ошибка.
Проставляется фактическая дата закрытия аренды. Осуществляется проверка просрочки. Если клиент уложился в отведенное договором аренды время, статус аренды становится "closed", если нет то договор закрывается с просрочкой -
статус аренды "closed expired". В текущей реализации это лишь демонстрация потенциальных возможностей приложения.